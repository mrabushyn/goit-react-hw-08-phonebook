{"version":3,"file":"static/js/486.ac7cad3a.chunk.js","mappings":"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","sources":["redux/selectors.js","webpack://react-homework-template/./src/components/Phonebook.module.css?8f1e","components/Filter.jsx","components/ContactList.jsx","components/ContactForm.jsx","../node_modules/nanoid/index.browser.js","pages/Phonebook.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.contacts;\nexport const selectFilter = state => state.contacts.filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"phonebookContainer\":\"Phonebook_phonebookContainer__jrIRE\",\"labelField\":\"Phonebook_labelField__IakMK\",\"inputField\":\"Phonebook_inputField__0ASqN\",\"formContainer\":\"Phonebook_formContainer__ESnE7\",\"formField\":\"Phonebook_formField__v4fyy\",\"btnStyle\":\"Phonebook_btnStyle__knRoF\",\"delBtnStyle\":\"Phonebook_delBtnStyle__QU57N\",\"contactList\":\"Phonebook_contactList__i-DJn\"};","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { filteredList } from 'redux/fetchContactsSlice';\nimport css from './Phonebook.module.css';\n\nexport default function Filter () {\n    const dispatch = useDispatch();\n\n    const changeFilter = evt => {\n      dispatch(filteredList(evt.currentTarget.value));\n    };\n\n    return (\n      <label className={css.labelField}>\n        find contact by name:\n        <input\n          className={css.inputField}\n          type=\"text\"\n          onChange={changeFilter}\n        />\n      </label>\n    );\n  };\n\n","import { useSelector, useDispatch } from 'react-redux';\nimport css from './Phonebook.module.css';\n\nimport { useEffect } from 'react';\nimport { fetchContacts, deleteContact } from 'redux/contactOperations';\nimport { selectContacts, selectFilter } from 'redux/selectors';\n// import {ContactsApi} from 'components/ContactsQuery'\n\nexport default function ContactList () {\n// console.log('data', data);\n\n  const dispatch = useDispatch();\n\n  const { items, isLoading, error } = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\nconsole.log('items', items);\n  const normalizedFilter = filter.toLowerCase();\n  const filteredContacts = items.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n  \n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ul>\n      {isLoading && !error && <b>Request in progress...</b>}\n      {filteredContacts.length > 0 &&\n        filteredContacts.map(contact => (\n          <li key={contact.id} className={css.contactList}>\n            {contact.name}: {contact.number}\n            <button\n              type=\"onClick\"\n              onClick={() => {\n                dispatch(deleteContact(contact.id));\n              }}\n              className={css.delBtnStyle}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n\n      {error && <p>{error}</p>}\n\n      {/* <div>{data}</div> */}\n    </ul>\n  );\n}\n","import { useState } from 'react';\nimport css from './Phonebook.module.css';\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\n\nexport default function ContactForm({ formSubmitHandler }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = evt => {\n    const { name, value } = evt.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    formSubmitHandler({ name, number });\n    evt.currentTarget.reset();\n  };\n\n  let loginInputId = nanoid();\n\n  return (\n    <div className={css.formContainer}>\n      <form action=\"\" \n      className={css.formField} \n      onSubmit={handleSubmit}>\n        <label htmlFor={loginInputId} className={css.labelField}>\n          Name\n        </label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          id={loginInputId}\n          className={css.inputField}\n          onChange={handleChange}\n        />\n        <label htmlFor={loginInputId} className={css.labelField}>\n          Number\n        </label>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          id={loginInputId}\n          className={css.inputField}\n          onChange={handleChange}\n        />\n        <button type=\"submit\" className={css.btnStyle}>\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n}\n\nContactForm.propTypes = {\n  formSubmitHandler: PropTypes.func.isRequired,\n};\n\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contactOperations';\nimport { selectContacts } from 'redux/selectors';\nimport { Helmet } from 'react-helmet';\n\n\nimport Filter from '../components/Filter';\nimport ContactList from '../components/ContactList';\nimport ContactForm from '../components/ContactForm';\n// import { Outlet } from 'react-router-dom';\n\nexport default function Phonebook() {\n  const dispatch = useDispatch();\n\n  const { items } = useSelector(selectContacts);\n  const formSubmitHandler = ({ name, number }) => {\n    const normalizedSameName = name.toLowerCase();\n\n    const findSameEl = items.find(\n      contact => contact.name.toLowerCase() === normalizedSameName\n    );\n\n    findSameEl\n      ? alert(`${name} is already in contacts`)\n      : dispatch(addContact({ name, number }));\n  };\n\n  return (\n    <div>\n      <Helmet>\n        <h2>Phonebook</h2>\n      </Helmet>\n      <ContactForm formSubmitHandler={formSubmitHandler} />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n"],"names":["selectContacts","state","contacts","selectFilter","filter","Filter","dispatch","useDispatch","className","css","type","onChange","evt","filteredList","currentTarget","value","ContactList","useSelector","items","isLoading","error","console","log","normalizedFilter","toLowerCase","filteredContacts","contact","name","includes","useEffect","fetchContacts","length","map","number","onClick","deleteContact","id","ContactForm","formSubmitHandler","useState","setName","setNumber","handleChange","target","loginInputId","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","action","onSubmit","preventDefault","reset","htmlFor","pattern","title","required","Phonebook","Helmet","normalizedSameName","find","alert","addContact"],"sourceRoot":""}